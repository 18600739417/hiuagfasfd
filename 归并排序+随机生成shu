#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<Windows.h> // 引入Windows.h以使用高精度计时器

#define MaxLength 10

void merge(int* arr1, int* arr2, int* result, int length1, int length2);
void mergeSort(int* arr, int* re, int startIndex, int endIndex);
void InputData(int &flag, int a[]);

int main()
{
    int flag = 0;
    int data[MaxLength];
    InputData(flag, data);
    printf("排序前数据：");
    for (int i = 1; i <= flag; i++)
    {
        printf("%6d", data[i]);
    }
    printf("\n");

    // 调用归并排序
    int* result = (int*)malloc(flag * sizeof(int));

    LARGE_INTEGER frequency; // 用于存储计时器的频率
    LARGE_INTEGER start, end; // 用于存储计时器的开始和结束时间
    double elapsedTime; // 用于存储排序所用的时间

    // 获取计时器频率
    QueryPerformanceFrequency(&frequency);

    // 开始计时
    QueryPerformanceCounter(&start);

    mergeSort(data, result, 1, flag);

    // 结束计时
    QueryPerformanceCounter(&end);

    // 计算排序所用的时间
    elapsedTime = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;
    printf("归并排序时间: %lf 秒\n", elapsedTime);

    printf("排序后数据：");
    for (int i = 1; i <= flag; i++)
    {
        printf("%6d", result[i - 1]);
    }
    printf("\n");

    free(result);
    return 0;
}

void merge(int* arr1, int* arr2, int* result, int length1, int length2) {
    int point1 = 0;
    int point2 = 0;
    int resultPoint = 0;
    while (!(point1 == length1 && point2 == length2)) {
        if (point1 == length1) {
            result[resultPoint] = arr2[point2];
            point2++, resultPoint++;
            continue;
        }
        if (point2 == length2) {
            result[resultPoint] = arr1[point1];
            point1++, resultPoint++;
            continue;
        }
        if (arr1[point1] < arr2[point2]) {
            result[resultPoint] = arr1[point1];
            point1++, resultPoint++;
        }
        else {
            result[resultPoint] = arr2[point2];
            point2++, resultPoint++;
        }
    }
}

void mergeSort(int* arr, int* re, int startIndex, int endIndex) {
    if (startIndex == endIndex) {
        re[0] = arr[startIndex];
        return;
    }
    int middle = (startIndex + endIndex) / 2;
    int* in1 = (int*)malloc((middle - startIndex + 1) * sizeof(int));
    mergeSort(arr, in1, startIndex, middle);
    int* in2 = (int*)malloc((endIndex - middle) * sizeof(int));
    mergeSort(arr, in2, middle + 1, endIndex);
    merge(in1, in2, re, middle - startIndex + 1, endIndex - middle);
    free(in1);
    free(in2);
}

void InputData(int &flag, int a[])
{
    srand((unsigned int)time(NULL)); // 设置随机数种子
    flag = MaxLength; // 设置数组长度
    for (int i = 1; i <= flag; i++) {
        a[i] = rand(); // 生成随机数
    }
}
